4. Median of Two Sorted Arrays
Hard
24.4K
2.7K
Companies
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


import os
import numpy as np
import librosa

# Set the directory paths for the original audio files
input_dir = '/media/speech70809/Data011/speech_donoiser_new/datasets/NER_TRs_Vol_3_test'

# Set the directory paths for the impulse response (IR) files
reverb_ir_dir = '/media/speech70809/Data011/speech_donoiser_new/datasets/reverb_noise_test'
echo_ir_dir = '/media/speech70809/Data011/speech_donoiser_new/datasets/echowav'

# Set the output directory path for the processed files
output_dir = '/media/speech70809/Data011/speech_donoiser_new/datasets/Reverb_noise_new'

# Get the list of audio file names
audio_files = os.listdir(input_dir)

# Create the output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Set the parameters for the echo effect
delay_time = 0.5  # Adjust the delay time as desired
echo_strength = 0.6  # Adjust the echo strength as desired

# Iterate over each audio file
for audio_file in audio_files:
    # Load the original speech signal
    audio_path = os.path.join(input_dir, audio_file)
    original_speech, sample_rate = librosa.load(audio_path, sr=None)

    # Find the corresponding impulse response (IR) files
    reverb_ir_file = audio_file.replace('.wav', '_reverb_ir.wav')
    echo_ir_file = audio_file.replace('.wav', '_echo_ir.wav')

    # Load the impulse response (IR) files
    reverb_ir_path = os.path.join(reverb_ir_dir, reverb_ir_file)
    echo_ir_path = os.path.join(echo_ir_dir, echo_ir_file)

    ir_reverb, _ = librosa.load(reverb_ir_path, sr=None)
    ir_echo, _ = librosa.load(echo_ir_path, sr=None)

    # Ensure the sample rates match
    if sample_rate != librosa.get_samplerate(reverb_ir_path) or sample_rate != librosa.get_samplerate(echo_ir_path):
        raise ValueError("Sample rates of the audio files do not match.")

    # Convert the delay time from seconds to samples
    delay_samples = int(delay_time * sample_rate)

    # Perform convolution for reverb effect
    reverb_speech = np.convolve(original_speech, ir_reverb, mode='full')

    # Perform convolution for echo effect
    echo = np.zeros_like(reverb_speech)
    echo[delay_samples:] = echo_strength * np.convolve(original_speech, ir_echo, mode='full')[:-delay_samples]

    # Add the echo to the reverb speech
    reverb_echo_speech = reverb_speech + echo

    # Normalize the reverb echo speech
    reverb_echo_speech /= np.max(np.abs(reverb_echo_speech))

    # Save the reverb echo speech as a new audio file
    output_path = os.path.join(output_dir, audio_file)
    librosa.output.write_wav(output_path, reverb_echo_speech, sample_rate)
